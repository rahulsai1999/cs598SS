@article{10.1145/3033273,
author = {Lu, Lanyue and Pillai, Thanumalayan Sankaranarayana and Gopalakrishnan, Hariharan and Arpaci-Dusseau, Andrea C. and Arpaci-Dusseau, Remzi H.},
title = {WiscKey: Separating Keys from Values in SSD-Conscious Storage},
year = {2017},
issue_date = {February 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {1},
issn = {1553-3077},
url = {https://doi.org/10.1145/3033273},
doi = {10.1145/3033273},
abstract = {We present WiscKey, a persistent LSM-tree-based key-value store with a performance-oriented data layout that separates keys from values to minimize I/O amplification. The design of WiscKey is highly SSD optimized, leveraging both the sequential and random performance characteristics of the device. We demonstrate the advantages of WiscKey with both microbenchmarks and YCSB workloads. Microbenchmark results show that WiscKey is 2.5 \texttimes{} to 111 \texttimes{} faster than LevelDB for loading a database (with significantly better tail latencies) and 1.6 \texttimes{} to 14 \texttimes{} faster for random lookups. WiscKey is faster than both LevelDB and RocksDB in all six YCSB workloads.},
journal = {ACM Trans. Storage},
month = {mar},
articleno = {5},
numpages = {28},
keywords = {LevelDB, WiscKey, flash-based SSDs}
}
@inproceedings{10.1145/1376616.1376723,
author = {Lee, Sang-Won and Moon, Bongki and Park, Chanik and Kim, Jae-Myung and Kim, Sang-Woo},
title = {A Case for Flash Memory Ssd in Enterprise Database Applications},
year = {2008},
isbn = {9781605581026},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1376616.1376723},
doi = {10.1145/1376616.1376723},
abstract = {Due to its superiority such as low access latency, low energy consumption, light weight, and shock resistance, the success of flash memory as a storage alternative for mobile computing devices has been steadily expanded into personal computer and enterprise server markets with ever increasing capacity of its storage. However, since flash memory exhibits poor performance for small-to-moderate sized writes requested in a random order, existing database systems may not be able to take full advantage of flash memory without elaborate flash-aware data structures and algorithms. The objective of this work is to understand the applicability and potential impact that flash memory SSD (Solid State Drive) has for certain type of storage spaces of a database server where sequential writes and random reads are prevalent. We show empirically that up to more than an order of magnitude improvement can be achieved in transaction processing by replacing magnetic disk with flash memory SSD for transaction log, rollback segments, and temporary table spaces.},
booktitle = {Proceedings of the 2008 ACM SIGMOD International Conference on Management of Data},
pages = {1075–1086},
numpages = {12},
keywords = {flash-memory database server, flash-memory ssd},
location = {Vancouver, Canada},
series = {SIGMOD '08}
}
@inproceedings{fountain2005pci,
  title={PCI express: An overview of PCI express, cabled PCI express and PXI express},
  author={Fountain, Trevor and McCarthy, Alexandra and Peng, Fangfang and others},
  booktitle={10th ICALEPCS Int. Conf. on Accelerator \& Large Expt. Physics Control Systems},
  year={2005}
}
@INPROCEEDINGS{7518376,
  author={Yang, Fei and Dou, Kun and Chen, Siyu and Hou, Mengwei and Kang, Jeong-Uk and Cho, Sangyeun},
  booktitle={2015 IEEE 12th Intl Conf on Ubiquitous Intelligence and Computing and 2015 IEEE 12th Intl Conf on Autonomic and Trusted Computing and 2015 IEEE 15th Intl Conf on Scalable Computing and Communications and Its Associated Workshops (UIC-ATC-ScalCom)}, 
  title={Optimizing NoSQL DB on Flash: A Case Study of RocksDB}, 
  year={2015},
  volume={},
  number={},
  pages={1062-1069},
  doi={10.1109/UIC-ATC-ScalCom-CBDCom-IoP.2015.197}
}
@inproceedings{10.5555/3489146.3489150,
author = {Conway, Alex and Gupta, Abhishek and Chidambaran, Vijay and Farach-Colton, Martin and Spillane, Rick and Tai, Amy and Johnson, Rob},
title = {SplinterDB: Closing the Bandwidth Gap for NVMe Key-Value Stores},
year = {2020},
isbn = {978-1-939133-14-4},
publisher = {USENIX Association},
address = {USA},
abstract = {Modern NVMe solid state drives offer significantly higher bandwidth and lower latency than prior storage devices. Current key-value stores struggle to fully utilize the bandwidth of such devices. This paper presents SplinterDB, a new key-value store explicitly designed for NVMe solid-state-drives.SplinterDB is designed around a novel data structure (the STBε-tree) that exposes I/O and CPU concurrency and reduces write amplification without sacrificing query performance. STBε-tree combines ideas from log-structured merge trees and Bε-trees to reduce write amplification and CPU costs of compaction. The SplinterDB memtable and cache are designed to be highly concurrent and to reduce cache misses.We evaluate SplinterDB on a number of micro- and macro-benchmarks, and show that SplinterDB outperforms RocksDB, a state-of-the-art key-value store, by a factor of 6-10\texttimes{} on insertions and 2-2.6\texttimes{} on point queries, while matching RocksDB on small range queries. Furthermore, SplinterDB reduces write amplification by 2\texttimes{} compared to RocksDB.},
booktitle = {Proceedings of the 2020 USENIX Conference on Usenix Annual Technical Conference},
articleno = {4},
numpages = {15},
series = {USENIX ATC'20}
}
@inproceedings{10.1145/1807128.1807152,
author = {Cooper, Brian F. and Silberstein, Adam and Tam, Erwin and Ramakrishnan, Raghu and Sears, Russell},
title = {Benchmarking Cloud Serving Systems with YCSB},
year = {2010},
isbn = {9781450300360},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1807128.1807152},
doi = {10.1145/1807128.1807152},
abstract = {While the use of MapReduce systems (such as Hadoop) for large scale data analysis has been widely recognized and studied, we have recently seen an explosion in the number of systems developed for cloud data serving. These newer systems address "cloud OLTP" applications, though they typically do not support ACID transactions. Examples of systems proposed for cloud serving use include BigTable, PNUTS, Cassandra, HBase, Azure, CouchDB, SimpleDB, Voldemort, and many others. Further, they are being applied to a diverse range of applications that differ considerably from traditional (e.g., TPC-C like) serving workloads. The number of emerging cloud serving systems and the wide range of proposed applications, coupled with a lack of apples-to-apples performance comparisons, makes it difficult to understand the tradeoffs between systems and the workloads for which they are suited. We present the "Yahoo! Cloud Serving Benchmark" (YCSB) framework, with the goal of facilitating performance comparisons of the new generation of cloud data serving systems. We define a core set of benchmarks and report results for four widely used systems: Cassandra, HBase, Yahoo!'s PNUTS, and a simple sharded MySQL implementation. We also hope to foster the development of additional cloud benchmark suites that represent other classes of applications by making our benchmark tool available via open source. In this regard, a key feature of the YCSB framework/tool is that it is extensible--it supports easy definition of new workloads, in addition to making it easy to benchmark new systems.},
booktitle = {Proceedings of the 1st ACM Symposium on Cloud Computing},
pages = {143–154},
numpages = {12},
keywords = {benchmarking, cloud serving database},
location = {Indianapolis, Indiana, USA},
series = {SoCC '10}
}
@article{ricci2014introducing,
  title={Introducing CloudLab: Scientific infrastructure for advancing cloud architectures and applications},
  author={Ricci, Robert and Eide, Eric and Team, CloudLab},
  journal={; login:: the magazine of USENIX \& SAGE},
  volume={39},
  number={6},
  pages={36--38},
  year={2014},
  publisher={USENIX Association}
}

